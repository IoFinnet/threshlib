// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: schnorr-keygen.proto

package keygen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a BROADCAST message sent during Round 1 of the EDDSA TSS keygen protocol.
type KGRound1Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound1Message) Reset() {
	*x = KGRound1Message{}
	mi := &file_schnorr_keygen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound1Message) ProtoMessage() {}

func (x *KGRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_schnorr_keygen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound1Message.ProtoReflect.Descriptor instead.
func (*KGRound1Message) Descriptor() ([]byte, []int) {
	return file_schnorr_keygen_proto_rawDescGZIP(), []int{0}
}

func (x *KGRound1Message) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// Represents a P2P message sent to each party during Round 2 of the EDDSA TSS keygen protocol.
type KGRound2Message1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Share         []byte                 `protobuf:"bytes,1,opt,name=share,proto3" json:"share,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound2Message1) Reset() {
	*x = KGRound2Message1{}
	mi := &file_schnorr_keygen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound2Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound2Message1) ProtoMessage() {}

func (x *KGRound2Message1) ProtoReflect() protoreflect.Message {
	mi := &file_schnorr_keygen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound2Message1.ProtoReflect.Descriptor instead.
func (*KGRound2Message1) Descriptor() ([]byte, []int) {
	return file_schnorr_keygen_proto_rawDescGZIP(), []int{1}
}

func (x *KGRound2Message1) GetShare() []byte {
	if x != nil {
		return x.Share
	}
	return nil
}

// Represents a BROADCAST message sent to each party during Round 2 of the EDDSA TSS keygen protocol.
type KGRound2Message2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeCommitment  [][]byte               `protobuf:"bytes,1,rep,name=de_commitment,json=deCommitment,proto3" json:"de_commitment,omitempty"`
	Proof         [][]byte               `protobuf:"bytes,2,rep,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound2Message2) Reset() {
	*x = KGRound2Message2{}
	mi := &file_schnorr_keygen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound2Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound2Message2) ProtoMessage() {}

func (x *KGRound2Message2) ProtoReflect() protoreflect.Message {
	mi := &file_schnorr_keygen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound2Message2.ProtoReflect.Descriptor instead.
func (*KGRound2Message2) Descriptor() ([]byte, []int) {
	return file_schnorr_keygen_proto_rawDescGZIP(), []int{2}
}

func (x *KGRound2Message2) GetDeCommitment() [][]byte {
	if x != nil {
		return x.DeCommitment
	}
	return nil
}

func (x *KGRound2Message2) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

var File_schnorr_keygen_proto protoreflect.FileDescriptor

const file_schnorr_keygen_proto_rawDesc = "" +
	"\n" +
	"\x14schnorr-keygen.proto\x12\x1bbinance.tsslib.eddsa.keygen\"1\n" +
	"\x0fKGRound1Message\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\"(\n" +
	"\x10KGRound2Message1\x12\x14\n" +
	"\x05share\x18\x01 \x01(\fR\x05share\"M\n" +
	"\x10KGRound2Message2\x12#\n" +
	"\rde_commitment\x18\x01 \x03(\fR\fdeCommitment\x12\x14\n" +
	"\x05proof\x18\x02 \x03(\fR\x05proofB\x14Z\x12tss/schnorr/keygenb\x06proto3"

var (
	file_schnorr_keygen_proto_rawDescOnce sync.Once
	file_schnorr_keygen_proto_rawDescData []byte
)

func file_schnorr_keygen_proto_rawDescGZIP() []byte {
	file_schnorr_keygen_proto_rawDescOnce.Do(func() {
		file_schnorr_keygen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_schnorr_keygen_proto_rawDesc), len(file_schnorr_keygen_proto_rawDesc)))
	})
	return file_schnorr_keygen_proto_rawDescData
}

var file_schnorr_keygen_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_schnorr_keygen_proto_goTypes = []any{
	(*KGRound1Message)(nil),  // 0: binance.tsslib.eddsa.keygen.KGRound1Message
	(*KGRound2Message1)(nil), // 1: binance.tsslib.eddsa.keygen.KGRound2Message1
	(*KGRound2Message2)(nil), // 2: binance.tsslib.eddsa.keygen.KGRound2Message2
}
var file_schnorr_keygen_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_schnorr_keygen_proto_init() }
func file_schnorr_keygen_proto_init() {
	if File_schnorr_keygen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_schnorr_keygen_proto_rawDesc), len(file_schnorr_keygen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schnorr_keygen_proto_goTypes,
		DependencyIndexes: file_schnorr_keygen_proto_depIdxs,
		MessageInfos:      file_schnorr_keygen_proto_msgTypes,
	}.Build()
	File_schnorr_keygen_proto = out.File
	file_schnorr_keygen_proto_goTypes = nil
	file_schnorr_keygen_proto_depIdxs = nil
}
