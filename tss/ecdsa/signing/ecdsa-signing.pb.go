// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: ecdsa-signing.proto

package signing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a P2P message sent to each party during Round 1 of the ECDSA TSS pre-signing protocol.
type PreSignRound1Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	K             []byte                 `protobuf:"bytes,1,opt,name=K,proto3" json:"K,omitempty"`
	G             []byte                 `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	EncProof      [][]byte               `protobuf:"bytes,3,rep,name=EncProof,proto3" json:"EncProof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreSignRound1Message) Reset() {
	*x = PreSignRound1Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSignRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound1Message) ProtoMessage() {}

func (x *PreSignRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound1Message.ProtoReflect.Descriptor instead.
func (*PreSignRound1Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{0}
}

func (x *PreSignRound1Message) GetK() []byte {
	if x != nil {
		return x.K
	}
	return nil
}

func (x *PreSignRound1Message) GetG() []byte {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *PreSignRound1Message) GetEncProof() [][]byte {
	if x != nil {
		return x.EncProof
	}
	return nil
}

// Represents a P2P message sent to each party during Round 2 of the ECDSA TSS pre-signing protocol.
type PreSignRound2Message struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BigGammaShare  [][]byte               `protobuf:"bytes,1,rep,name=BigGammaShare,proto3" json:"BigGammaShare,omitempty"`
	DjiDelta       []byte                 `protobuf:"bytes,2,opt,name=DjiDelta,proto3" json:"DjiDelta,omitempty"`
	FjiDelta       []byte                 `protobuf:"bytes,3,opt,name=FjiDelta,proto3" json:"FjiDelta,omitempty"`
	DjiChi         []byte                 `protobuf:"bytes,4,opt,name=DjiChi,proto3" json:"DjiChi,omitempty"`
	FjiChi         []byte                 `protobuf:"bytes,5,opt,name=FjiChi,proto3" json:"FjiChi,omitempty"`
	AffgProofDelta [][]byte               `protobuf:"bytes,6,rep,name=AffgProofDelta,proto3" json:"AffgProofDelta,omitempty"`
	AffgProofChi   [][]byte               `protobuf:"bytes,7,rep,name=AffgProofChi,proto3" json:"AffgProofChi,omitempty"`
	LogstarProof   [][]byte               `protobuf:"bytes,8,rep,name=LogstarProof,proto3" json:"LogstarProof,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PreSignRound2Message) Reset() {
	*x = PreSignRound2Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSignRound2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound2Message) ProtoMessage() {}

func (x *PreSignRound2Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound2Message.ProtoReflect.Descriptor instead.
func (*PreSignRound2Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{1}
}

func (x *PreSignRound2Message) GetBigGammaShare() [][]byte {
	if x != nil {
		return x.BigGammaShare
	}
	return nil
}

func (x *PreSignRound2Message) GetDjiDelta() []byte {
	if x != nil {
		return x.DjiDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetFjiDelta() []byte {
	if x != nil {
		return x.FjiDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetDjiChi() []byte {
	if x != nil {
		return x.DjiChi
	}
	return nil
}

func (x *PreSignRound2Message) GetFjiChi() []byte {
	if x != nil {
		return x.FjiChi
	}
	return nil
}

func (x *PreSignRound2Message) GetAffgProofDelta() [][]byte {
	if x != nil {
		return x.AffgProofDelta
	}
	return nil
}

func (x *PreSignRound2Message) GetAffgProofChi() [][]byte {
	if x != nil {
		return x.AffgProofChi
	}
	return nil
}

func (x *PreSignRound2Message) GetLogstarProof() [][]byte {
	if x != nil {
		return x.LogstarProof
	}
	return nil
}

// Represents a P2P message sent to all parties during Round 3 of the ECDSA TSS pre-signing protocol.
type PreSignRound3Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeltaShare    []byte                 `protobuf:"bytes,1,opt,name=DeltaShare,proto3" json:"DeltaShare,omitempty"`
	BigDeltaShare [][]byte               `protobuf:"bytes,2,rep,name=BigDeltaShare,proto3" json:"BigDeltaShare,omitempty"`
	ProofLogstar  [][]byte               `protobuf:"bytes,3,rep,name=ProofLogstar,proto3" json:"ProofLogstar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreSignRound3Message) Reset() {
	*x = PreSignRound3Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreSignRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreSignRound3Message) ProtoMessage() {}

func (x *PreSignRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreSignRound3Message.ProtoReflect.Descriptor instead.
func (*PreSignRound3Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{2}
}

func (x *PreSignRound3Message) GetDeltaShare() []byte {
	if x != nil {
		return x.DeltaShare
	}
	return nil
}

func (x *PreSignRound3Message) GetBigDeltaShare() [][]byte {
	if x != nil {
		return x.BigDeltaShare
	}
	return nil
}

func (x *PreSignRound3Message) GetProofLogstar() [][]byte {
	if x != nil {
		return x.ProofLogstar
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 4 of the ECDSA TSS signing protocol.
type SignRound4Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SigmaShare    []byte                 `protobuf:"bytes,1,opt,name=SigmaShare,proto3" json:"SigmaShare,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound4Message) Reset() {
	*x = SignRound4Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound4Message) ProtoMessage() {}

func (x *SignRound4Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound4Message.ProtoReflect.Descriptor instead.
func (*SignRound4Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{3}
}

func (x *SignRound4Message) GetSigmaShare() []byte {
	if x != nil {
		return x.SigmaShare
	}
	return nil
}

type SignRound4AbortingMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound4AbortingMessage) Reset() {
	*x = SignRound4AbortingMessage{}
	mi := &file_ecdsa_signing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound4AbortingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound4AbortingMessage) ProtoMessage() {}

func (x *SignRound4AbortingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound4AbortingMessage.ProtoReflect.Descriptor instead.
func (*SignRound4AbortingMessage) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{4}
}

type IdentificationPrepRound5Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gamma         []byte                 `protobuf:"bytes,1,opt,name=Gamma,proto3" json:"Gamma,omitempty"`
	Sji           []byte                 `protobuf:"bytes,2,opt,name=Sji,proto3" json:"Sji,omitempty"`
	BetaNegji     []byte                 `protobuf:"bytes,3,opt,name=BetaNegji,proto3" json:"BetaNegji,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentificationPrepRound5Message) Reset() {
	*x = IdentificationPrepRound5Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentificationPrepRound5Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationPrepRound5Message) ProtoMessage() {}

func (x *IdentificationPrepRound5Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationPrepRound5Message.ProtoReflect.Descriptor instead.
func (*IdentificationPrepRound5Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{5}
}

func (x *IdentificationPrepRound5Message) GetGamma() []byte {
	if x != nil {
		return x.Gamma
	}
	return nil
}

func (x *IdentificationPrepRound5Message) GetSji() []byte {
	if x != nil {
		return x.Sji
	}
	return nil
}

func (x *IdentificationPrepRound5Message) GetBetaNegji() []byte {
	if x != nil {
		return x.BetaNegji
	}
	return nil
}

type IdentificationRound6Message struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	H                 []byte                 `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
	MulProof          [][]byte               `protobuf:"bytes,2,rep,name=MulProof,proto3" json:"MulProof,omitempty"`
	DeltaShareEnc     []byte                 `protobuf:"bytes,3,opt,name=DeltaShareEnc,proto3" json:"DeltaShareEnc,omitempty"`
	EncryptedValueSum []byte                 `protobuf:"bytes,4,opt,name=EncryptedValueSum,proto3" json:"EncryptedValueSum,omitempty"`
	DecProof          [][]byte               `protobuf:"bytes,5,rep,name=DecProof,proto3" json:"DecProof,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IdentificationRound6Message) Reset() {
	*x = IdentificationRound6Message{}
	mi := &file_ecdsa_signing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentificationRound6Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentificationRound6Message) ProtoMessage() {}

func (x *IdentificationRound6Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentificationRound6Message.ProtoReflect.Descriptor instead.
func (*IdentificationRound6Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{6}
}

func (x *IdentificationRound6Message) GetH() []byte {
	if x != nil {
		return x.H
	}
	return nil
}

func (x *IdentificationRound6Message) GetMulProof() [][]byte {
	if x != nil {
		return x.MulProof
	}
	return nil
}

func (x *IdentificationRound6Message) GetDeltaShareEnc() []byte {
	if x != nil {
		return x.DeltaShareEnc
	}
	return nil
}

func (x *IdentificationRound6Message) GetEncryptedValueSum() []byte {
	if x != nil {
		return x.EncryptedValueSum
	}
	return nil
}

func (x *IdentificationRound6Message) GetDecProof() [][]byte {
	if x != nil {
		return x.DecProof
	}
	return nil
}

type TempDataDumpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataDump      []byte                 `protobuf:"bytes,1,opt,name=DataDump,proto3" json:"DataDump,omitempty"`
	RoundNum      int32                  `protobuf:"varint,2,opt,name=RoundNum,proto3" json:"RoundNum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TempDataDumpMessage) Reset() {
	*x = TempDataDumpMessage{}
	mi := &file_ecdsa_signing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempDataDumpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempDataDumpMessage) ProtoMessage() {}

func (x *TempDataDumpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_signing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempDataDumpMessage.ProtoReflect.Descriptor instead.
func (*TempDataDumpMessage) Descriptor() ([]byte, []int) {
	return file_ecdsa_signing_proto_rawDescGZIP(), []int{7}
}

func (x *TempDataDumpMessage) GetDataDump() []byte {
	if x != nil {
		return x.DataDump
	}
	return nil
}

func (x *TempDataDumpMessage) GetRoundNum() int32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

var File_ecdsa_signing_proto protoreflect.FileDescriptor

const file_ecdsa_signing_proto_rawDesc = "" +
	"\n" +
	"\x13ecdsa-signing.proto\x12\x1cbinance.tsslib.ecdsa.signing\"N\n" +
	"\x14PreSignRound1Message\x12\f\n" +
	"\x01K\x18\x01 \x01(\fR\x01K\x12\f\n" +
	"\x01G\x18\x02 \x01(\fR\x01G\x12\x1a\n" +
	"\bEncProof\x18\x03 \x03(\fR\bEncProof\"\x94\x02\n" +
	"\x14PreSignRound2Message\x12$\n" +
	"\rBigGammaShare\x18\x01 \x03(\fR\rBigGammaShare\x12\x1a\n" +
	"\bDjiDelta\x18\x02 \x01(\fR\bDjiDelta\x12\x1a\n" +
	"\bFjiDelta\x18\x03 \x01(\fR\bFjiDelta\x12\x16\n" +
	"\x06DjiChi\x18\x04 \x01(\fR\x06DjiChi\x12\x16\n" +
	"\x06FjiChi\x18\x05 \x01(\fR\x06FjiChi\x12&\n" +
	"\x0eAffgProofDelta\x18\x06 \x03(\fR\x0eAffgProofDelta\x12\"\n" +
	"\fAffgProofChi\x18\a \x03(\fR\fAffgProofChi\x12\"\n" +
	"\fLogstarProof\x18\b \x03(\fR\fLogstarProof\"\x80\x01\n" +
	"\x14PreSignRound3Message\x12\x1e\n" +
	"\n" +
	"DeltaShare\x18\x01 \x01(\fR\n" +
	"DeltaShare\x12$\n" +
	"\rBigDeltaShare\x18\x02 \x03(\fR\rBigDeltaShare\x12\"\n" +
	"\fProofLogstar\x18\x03 \x03(\fR\fProofLogstar\"3\n" +
	"\x11SignRound4Message\x12\x1e\n" +
	"\n" +
	"SigmaShare\x18\x01 \x01(\fR\n" +
	"SigmaShare\"\x1b\n" +
	"\x19SignRound4AbortingMessage\"g\n" +
	"\x1fIdentificationPrepRound5Message\x12\x14\n" +
	"\x05Gamma\x18\x01 \x01(\fR\x05Gamma\x12\x10\n" +
	"\x03Sji\x18\x02 \x01(\fR\x03Sji\x12\x1c\n" +
	"\tBetaNegji\x18\x03 \x01(\fR\tBetaNegji\"\xb7\x01\n" +
	"\x1bIdentificationRound6Message\x12\f\n" +
	"\x01H\x18\x01 \x01(\fR\x01H\x12\x1a\n" +
	"\bMulProof\x18\x02 \x03(\fR\bMulProof\x12$\n" +
	"\rDeltaShareEnc\x18\x03 \x01(\fR\rDeltaShareEnc\x12,\n" +
	"\x11EncryptedValueSum\x18\x04 \x01(\fR\x11EncryptedValueSum\x12\x1a\n" +
	"\bDecProof\x18\x05 \x03(\fR\bDecProof\"M\n" +
	"\x13TempDataDumpMessage\x12\x1a\n" +
	"\bDataDump\x18\x01 \x01(\fR\bDataDump\x12\x1a\n" +
	"\bRoundNum\x18\x02 \x01(\x05R\bRoundNumB\x13Z\x11tss/ecdsa/signingb\x06proto3"

var (
	file_ecdsa_signing_proto_rawDescOnce sync.Once
	file_ecdsa_signing_proto_rawDescData []byte
)

func file_ecdsa_signing_proto_rawDescGZIP() []byte {
	file_ecdsa_signing_proto_rawDescOnce.Do(func() {
		file_ecdsa_signing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ecdsa_signing_proto_rawDesc), len(file_ecdsa_signing_proto_rawDesc)))
	})
	return file_ecdsa_signing_proto_rawDescData
}

var file_ecdsa_signing_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ecdsa_signing_proto_goTypes = []any{
	(*PreSignRound1Message)(nil),            // 0: binance.tsslib.ecdsa.signing.PreSignRound1Message
	(*PreSignRound2Message)(nil),            // 1: binance.tsslib.ecdsa.signing.PreSignRound2Message
	(*PreSignRound3Message)(nil),            // 2: binance.tsslib.ecdsa.signing.PreSignRound3Message
	(*SignRound4Message)(nil),               // 3: binance.tsslib.ecdsa.signing.SignRound4Message
	(*SignRound4AbortingMessage)(nil),       // 4: binance.tsslib.ecdsa.signing.SignRound4AbortingMessage
	(*IdentificationPrepRound5Message)(nil), // 5: binance.tsslib.ecdsa.signing.IdentificationPrepRound5Message
	(*IdentificationRound6Message)(nil),     // 6: binance.tsslib.ecdsa.signing.IdentificationRound6Message
	(*TempDataDumpMessage)(nil),             // 7: binance.tsslib.ecdsa.signing.TempDataDumpMessage
}
var file_ecdsa_signing_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ecdsa_signing_proto_init() }
func file_ecdsa_signing_proto_init() {
	if File_ecdsa_signing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ecdsa_signing_proto_rawDesc), len(file_ecdsa_signing_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ecdsa_signing_proto_goTypes,
		DependencyIndexes: file_ecdsa_signing_proto_depIdxs,
		MessageInfos:      file_ecdsa_signing_proto_msgTypes,
	}.Build()
	File_ecdsa_signing_proto = out.File
	file_ecdsa_signing_proto_goTypes = nil
	file_ecdsa_signing_proto_depIdxs = nil
}
