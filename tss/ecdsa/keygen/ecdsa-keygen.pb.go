// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: ecdsa-keygen.proto

package keygen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a BROADCAST message sent during Round 1 of the ECDSA TSS keygen protocol.
type KGRound1Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           []byte                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	ViKeygen      []byte                 `protobuf:"bytes,2,opt,name=ViKeygen,proto3" json:"ViKeygen,omitempty"`
	Ssid          []byte                 `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
	ViKeyRefresh  []byte                 `protobuf:"bytes,4,opt,name=ViKeyRefresh,proto3" json:"ViKeyRefresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound1Message) Reset() {
	*x = KGRound1Message{}
	mi := &file_ecdsa_keygen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound1Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound1Message) ProtoMessage() {}

func (x *KGRound1Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_keygen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound1Message.ProtoReflect.Descriptor instead.
func (*KGRound1Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_keygen_proto_rawDescGZIP(), []int{0}
}

func (x *KGRound1Message) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *KGRound1Message) GetViKeygen() []byte {
	if x != nil {
		return x.ViKeygen
	}
	return nil
}

func (x *KGRound1Message) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *KGRound1Message) GetViKeyRefresh() []byte {
	if x != nil {
		return x.ViKeyRefresh
	}
	return nil
}

// Represents a BROADCAST message sent during Round 1 of the ECDSA TSS keygen protocol.
type KGRound2Message struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Sid       []byte                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Ridi      []byte                 `protobuf:"bytes,2,opt,name=ridi,proto3" json:"ridi,omitempty"`
	Ui        []byte                 `protobuf:"bytes,3,opt,name=ui,proto3" json:"ui,omitempty"`
	PaillierN []byte                 `protobuf:"bytes,4,opt,name=paillier_n,json=paillierN,proto3" json:"paillier_n,omitempty"`
	XiKeygen  [][]byte               `protobuf:"bytes,5,rep,name=XiKeygen,proto3" json:"XiKeygen,omitempty"`
	AiKeygen  [][]byte               `protobuf:"bytes,6,rep,name=AiKeygen,proto3" json:"AiKeygen,omitempty"`
	Vs        [][]byte               `protobuf:"bytes,7,rep,name=vs,proto3" json:"vs,omitempty"`
	// Refresh:
	Ssid          []byte   `protobuf:"bytes,8,opt,name=ssid,proto3" json:"ssid,omitempty"`
	XiRefresh     [][]byte `protobuf:"bytes,9,rep,name=XiRefresh,proto3" json:"XiRefresh,omitempty"`
	AiRefresh     [][]byte `protobuf:"bytes,10,rep,name=AiRefresh,proto3" json:"AiRefresh,omitempty"`
	Yi            [][]byte `protobuf:"bytes,11,rep,name=Yi,proto3" json:"Yi,omitempty"`
	Bi            [][]byte `protobuf:"bytes,12,rep,name=Bi,proto3" json:"Bi,omitempty"`
	Ni            []byte   `protobuf:"bytes,13,opt,name=Ni,proto3" json:"Ni,omitempty"`
	Si            []byte   `protobuf:"bytes,14,opt,name=si,proto3" json:"si,omitempty"`
	Ti            []byte   `protobuf:"bytes,15,opt,name=ti,proto3" json:"ti,omitempty"`
	PsiiProof     [][]byte `protobuf:"bytes,16,rep,name=psii_proof,json=psiiProof,proto3" json:"psii_proof,omitempty"`
	Rhoi          []byte   `protobuf:"bytes,17,opt,name=rhoi,proto3" json:"rhoi,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound2Message) Reset() {
	*x = KGRound2Message{}
	mi := &file_ecdsa_keygen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound2Message) ProtoMessage() {}

func (x *KGRound2Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_keygen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound2Message.ProtoReflect.Descriptor instead.
func (*KGRound2Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_keygen_proto_rawDescGZIP(), []int{1}
}

func (x *KGRound2Message) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *KGRound2Message) GetRidi() []byte {
	if x != nil {
		return x.Ridi
	}
	return nil
}

func (x *KGRound2Message) GetUi() []byte {
	if x != nil {
		return x.Ui
	}
	return nil
}

func (x *KGRound2Message) GetPaillierN() []byte {
	if x != nil {
		return x.PaillierN
	}
	return nil
}

func (x *KGRound2Message) GetXiKeygen() [][]byte {
	if x != nil {
		return x.XiKeygen
	}
	return nil
}

func (x *KGRound2Message) GetAiKeygen() [][]byte {
	if x != nil {
		return x.AiKeygen
	}
	return nil
}

func (x *KGRound2Message) GetVs() [][]byte {
	if x != nil {
		return x.Vs
	}
	return nil
}

func (x *KGRound2Message) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *KGRound2Message) GetXiRefresh() [][]byte {
	if x != nil {
		return x.XiRefresh
	}
	return nil
}

func (x *KGRound2Message) GetAiRefresh() [][]byte {
	if x != nil {
		return x.AiRefresh
	}
	return nil
}

func (x *KGRound2Message) GetYi() [][]byte {
	if x != nil {
		return x.Yi
	}
	return nil
}

func (x *KGRound2Message) GetBi() [][]byte {
	if x != nil {
		return x.Bi
	}
	return nil
}

func (x *KGRound2Message) GetNi() []byte {
	if x != nil {
		return x.Ni
	}
	return nil
}

func (x *KGRound2Message) GetSi() []byte {
	if x != nil {
		return x.Si
	}
	return nil
}

func (x *KGRound2Message) GetTi() []byte {
	if x != nil {
		return x.Ti
	}
	return nil
}

func (x *KGRound2Message) GetPsiiProof() [][]byte {
	if x != nil {
		return x.PsiiProof
	}
	return nil
}

func (x *KGRound2Message) GetRhoi() []byte {
	if x != nil {
		return x.Rhoi
	}
	return nil
}

// Represents a P2P message sent to each party during Round 3 of the ECDSA TSS keygen and key refresh protocols.
type KGRound3Message struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Sid          []byte                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	PsiiSchProof [][]byte               `protobuf:"bytes,2,rep,name=psii_sch_proof,json=psiiSchProof,proto3" json:"psii_sch_proof,omitempty"`
	// refresh:
	Ssid          []byte   `protobuf:"bytes,3,opt,name=ssid,proto3" json:"ssid,omitempty"`
	PsiiModProof  [][]byte `protobuf:"bytes,4,rep,name=psii_mod_proof,json=psiiModProof,proto3" json:"psii_mod_proof,omitempty"`
	PhijiProof    [][]byte `protobuf:"bytes,5,rep,name=phiji_proof,json=phijiProof,proto3" json:"phiji_proof,omitempty"`
	PiiProof      [][]byte `protobuf:"bytes,6,rep,name=pii_proof,json=piiProof,proto3" json:"pii_proof,omitempty"`
	Cvssji        []byte   `protobuf:"bytes,7,opt,name=Cvssji,proto3" json:"Cvssji,omitempty"`
	RandCvssji    []byte   `protobuf:"bytes,8,opt,name=randCvssji,proto3" json:"randCvssji,omitempty"`
	Czeroji       []byte   `protobuf:"bytes,9,opt,name=Czeroji,proto3" json:"Czeroji,omitempty"`
	RandCzeroji   []byte   `protobuf:"bytes,10,opt,name=randCzeroji,proto3" json:"randCzeroji,omitempty"`
	PsijiProof    [][]byte `protobuf:"bytes,11,rep,name=psiji_proof,json=psijiProof,proto3" json:"psiji_proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound3Message) Reset() {
	*x = KGRound3Message{}
	mi := &file_ecdsa_keygen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound3Message) ProtoMessage() {}

func (x *KGRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_keygen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound3Message.ProtoReflect.Descriptor instead.
func (*KGRound3Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_keygen_proto_rawDescGZIP(), []int{2}
}

func (x *KGRound3Message) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *KGRound3Message) GetPsiiSchProof() [][]byte {
	if x != nil {
		return x.PsiiSchProof
	}
	return nil
}

func (x *KGRound3Message) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *KGRound3Message) GetPsiiModProof() [][]byte {
	if x != nil {
		return x.PsiiModProof
	}
	return nil
}

func (x *KGRound3Message) GetPhijiProof() [][]byte {
	if x != nil {
		return x.PhijiProof
	}
	return nil
}

func (x *KGRound3Message) GetPiiProof() [][]byte {
	if x != nil {
		return x.PiiProof
	}
	return nil
}

func (x *KGRound3Message) GetCvssji() []byte {
	if x != nil {
		return x.Cvssji
	}
	return nil
}

func (x *KGRound3Message) GetRandCvssji() []byte {
	if x != nil {
		return x.RandCvssji
	}
	return nil
}

func (x *KGRound3Message) GetCzeroji() []byte {
	if x != nil {
		return x.Czeroji
	}
	return nil
}

func (x *KGRound3Message) GetRandCzeroji() []byte {
	if x != nil {
		return x.RandCzeroji
	}
	return nil
}

func (x *KGRound3Message) GetPsijiProof() [][]byte {
	if x != nil {
		return x.PsijiProof
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 4 of the ECDSA TSS keygen protocol.
type KGRound4Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           []byte                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Abort         bool                   `protobuf:"varint,2,opt,name=abort,proto3" json:"abort,omitempty"`
	Mu            []byte                 `protobuf:"bytes,3,opt,name=mu,proto3" json:"mu,omitempty"`
	CulpritPj     int32                  `protobuf:"varint,4,opt,name=culpritPj,proto3" json:"culpritPj,omitempty"`
	Cji           []byte                 `protobuf:"bytes,5,opt,name=Cji,proto3" json:"Cji,omitempty"`
	Xji           []byte                 `protobuf:"bytes,6,opt,name=xji,proto3" json:"xji,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KGRound4Message) Reset() {
	*x = KGRound4Message{}
	mi := &file_ecdsa_keygen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KGRound4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KGRound4Message) ProtoMessage() {}

func (x *KGRound4Message) ProtoReflect() protoreflect.Message {
	mi := &file_ecdsa_keygen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KGRound4Message.ProtoReflect.Descriptor instead.
func (*KGRound4Message) Descriptor() ([]byte, []int) {
	return file_ecdsa_keygen_proto_rawDescGZIP(), []int{3}
}

func (x *KGRound4Message) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *KGRound4Message) GetAbort() bool {
	if x != nil {
		return x.Abort
	}
	return false
}

func (x *KGRound4Message) GetMu() []byte {
	if x != nil {
		return x.Mu
	}
	return nil
}

func (x *KGRound4Message) GetCulpritPj() int32 {
	if x != nil {
		return x.CulpritPj
	}
	return 0
}

func (x *KGRound4Message) GetCji() []byte {
	if x != nil {
		return x.Cji
	}
	return nil
}

func (x *KGRound4Message) GetXji() []byte {
	if x != nil {
		return x.Xji
	}
	return nil
}

var File_ecdsa_keygen_proto protoreflect.FileDescriptor

const file_ecdsa_keygen_proto_rawDesc = "" +
	"\n" +
	"\x12ecdsa-keygen.proto\x12\x1bbinance.tsslib.ecdsa.keygen\"w\n" +
	"\x0fKGRound1Message\x12\x10\n" +
	"\x03sid\x18\x01 \x01(\fR\x03sid\x12\x1a\n" +
	"\bViKeygen\x18\x02 \x01(\fR\bViKeygen\x12\x12\n" +
	"\x04ssid\x18\x03 \x01(\fR\x04ssid\x12\"\n" +
	"\fViKeyRefresh\x18\x04 \x01(\fR\fViKeyRefresh\"\x81\x03\n" +
	"\x0fKGRound2Message\x12\x10\n" +
	"\x03sid\x18\x01 \x01(\fR\x03sid\x12\x12\n" +
	"\x04ridi\x18\x02 \x01(\fR\x04ridi\x12\x0e\n" +
	"\x02ui\x18\x03 \x01(\fR\x02ui\x12\x1d\n" +
	"\n" +
	"paillier_n\x18\x04 \x01(\fR\tpaillierN\x12\x1a\n" +
	"\bXiKeygen\x18\x05 \x03(\fR\bXiKeygen\x12\x1a\n" +
	"\bAiKeygen\x18\x06 \x03(\fR\bAiKeygen\x12\x0e\n" +
	"\x02vs\x18\a \x03(\fR\x02vs\x12\x12\n" +
	"\x04ssid\x18\b \x01(\fR\x04ssid\x12\x1c\n" +
	"\tXiRefresh\x18\t \x03(\fR\tXiRefresh\x12\x1c\n" +
	"\tAiRefresh\x18\n" +
	" \x03(\fR\tAiRefresh\x12\x0e\n" +
	"\x02Yi\x18\v \x03(\fR\x02Yi\x12\x0e\n" +
	"\x02Bi\x18\f \x03(\fR\x02Bi\x12\x0e\n" +
	"\x02Ni\x18\r \x01(\fR\x02Ni\x12\x0e\n" +
	"\x02si\x18\x0e \x01(\fR\x02si\x12\x0e\n" +
	"\x02ti\x18\x0f \x01(\fR\x02ti\x12\x1d\n" +
	"\n" +
	"psii_proof\x18\x10 \x03(\fR\tpsiiProof\x12\x12\n" +
	"\x04rhoi\x18\x11 \x01(\fR\x04rhoi\"\xd6\x02\n" +
	"\x0fKGRound3Message\x12\x10\n" +
	"\x03sid\x18\x01 \x01(\fR\x03sid\x12$\n" +
	"\x0epsii_sch_proof\x18\x02 \x03(\fR\fpsiiSchProof\x12\x12\n" +
	"\x04ssid\x18\x03 \x01(\fR\x04ssid\x12$\n" +
	"\x0epsii_mod_proof\x18\x04 \x03(\fR\fpsiiModProof\x12\x1f\n" +
	"\vphiji_proof\x18\x05 \x03(\fR\n" +
	"phijiProof\x12\x1b\n" +
	"\tpii_proof\x18\x06 \x03(\fR\bpiiProof\x12\x16\n" +
	"\x06Cvssji\x18\a \x01(\fR\x06Cvssji\x12\x1e\n" +
	"\n" +
	"randCvssji\x18\b \x01(\fR\n" +
	"randCvssji\x12\x18\n" +
	"\aCzeroji\x18\t \x01(\fR\aCzeroji\x12 \n" +
	"\vrandCzeroji\x18\n" +
	" \x01(\fR\vrandCzeroji\x12\x1f\n" +
	"\vpsiji_proof\x18\v \x03(\fR\n" +
	"psijiProof\"\x8b\x01\n" +
	"\x0fKGRound4Message\x12\x10\n" +
	"\x03sid\x18\x01 \x01(\fR\x03sid\x12\x14\n" +
	"\x05abort\x18\x02 \x01(\bR\x05abort\x12\x0e\n" +
	"\x02mu\x18\x03 \x01(\fR\x02mu\x12\x1c\n" +
	"\tculpritPj\x18\x04 \x01(\x05R\tculpritPj\x12\x10\n" +
	"\x03Cji\x18\x05 \x01(\fR\x03Cji\x12\x10\n" +
	"\x03xji\x18\x06 \x01(\fR\x03xjiB\x12Z\x10tss/ecdsa/keygenb\x06proto3"

var (
	file_ecdsa_keygen_proto_rawDescOnce sync.Once
	file_ecdsa_keygen_proto_rawDescData []byte
)

func file_ecdsa_keygen_proto_rawDescGZIP() []byte {
	file_ecdsa_keygen_proto_rawDescOnce.Do(func() {
		file_ecdsa_keygen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ecdsa_keygen_proto_rawDesc), len(file_ecdsa_keygen_proto_rawDesc)))
	})
	return file_ecdsa_keygen_proto_rawDescData
}

var file_ecdsa_keygen_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ecdsa_keygen_proto_goTypes = []any{
	(*KGRound1Message)(nil), // 0: binance.tsslib.ecdsa.keygen.KGRound1Message
	(*KGRound2Message)(nil), // 1: binance.tsslib.ecdsa.keygen.KGRound2Message
	(*KGRound3Message)(nil), // 2: binance.tsslib.ecdsa.keygen.KGRound3Message
	(*KGRound4Message)(nil), // 3: binance.tsslib.ecdsa.keygen.KGRound4Message
}
var file_ecdsa_keygen_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ecdsa_keygen_proto_init() }
func file_ecdsa_keygen_proto_init() {
	if File_ecdsa_keygen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ecdsa_keygen_proto_rawDesc), len(file_ecdsa_keygen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ecdsa_keygen_proto_goTypes,
		DependencyIndexes: file_ecdsa_keygen_proto_depIdxs,
		MessageInfos:      file_ecdsa_keygen_proto_msgTypes,
	}.Build()
	File_ecdsa_keygen_proto = out.File
	file_ecdsa_keygen_proto_goTypes = nil
	file_ecdsa_keygen_proto_depIdxs = nil
}
