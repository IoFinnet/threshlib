// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

package keygen

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/rand"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"os"
	"runtime"
	"sync/atomic"
	"testing"

	big "github.com/iofinnet/tss-lib/v3/common/int"
	"github.com/ipfs/go-log"
	"github.com/stretchr/testify/assert"

	"github.com/iofinnet/tss-lib/v3/common"
	"github.com/iofinnet/tss-lib/v3/crypto"
	"github.com/iofinnet/tss-lib/v3/crypto/vss"
	"github.com/iofinnet/tss-lib/v3/test"
	"github.com/iofinnet/tss-lib/v3/tss"
)

const (
	testParticipants = TestParticipants
	testThreshold    = TestThreshold

	// ecdsaSaveFixtureJSON is a mock JSON representation of the LocalPartySaveData struct used only in tests.
	ecdsaSaveFixtureJSON = "{\"PaillierSK\":{\"N\":23310402050297325781581483366962185815577041504078468156473005444250996328657951515328012353653336262537266843328590568648813742561585400734244531220249752442302288273857209811144750292063854373365634552714007249826566182261970725103702866325021566805324238206796552830683696865233491340944601323621437239500538679324801030257055596449014703042654100925165485435488922929343251052763566612397362360933498717823690199329937475763998834195938583864496871082278296150995427569233598061191229376977318451637070187561396048286739002653409628496068714610530789337190532271355670062240646033344054416256608881937430201577293,\"LambdaN\":11655201025148662890790741683481092907788520752039234078236502722125498164328975757664006176826668131268633421664295284324406871280792700367122265610124876221151144136928604905572375146031927186682817276357003624913283091130985362551851433162510783402662119103398276415341848432616745670472300661810718619750115613874689818751942204187606801389578826878289651473301398998659957011393220291846864636179885887279415451269086982930384224396685625581544523673911703488107494423318394339225685193158673889199037272660901629488756011856172578880735315062412540177508287505822666227858564476650371124071153230621765791635614,\"PhiN\":23310402050297325781581483366962185815577041504078468156473005444250996328657951515328012353653336262537266843328590568648813742561585400734244531220249752442302288273857209811144750292063854373365634552714007249826566182261970725103702866325021566805324238206796552830683696865233491340944601323621437239500231227749379637503884408375213602779157653756579302946602797997319914022786440583693729272359771774558830902538173965860768448793371251163089047347823406976214988846636788678451370386317347778398074545321803258977512023712345157761470630124825080355016575011645332455717128953300742248142306461243531583271228},\"NTildei\":23310402050297325781581483366962185815577041504078468156473005444250996328657951515328012353653336262537266843328590568648813742561585400734244531220249752442302288273857209811144750292063854373365634552714007249826566182261970725103702866325021566805324238206796552830683696865233491340944601323621437239500538679324801030257055596449014703042654100925165485435488922929343251052763566612397362360933498717823690199329937475763998834195938583864496871082278296150995427569233598061191229376977318451637070187561396048286739002653409628496068714610530789337190532271355670062240646033344054416256608881937430201577293,\"H1i\":23014882774425849099472165037063951513060118783893942126976548830173536645223150576191774437336699502942360822956565575694746408679762617757003831353058806704836813780037256813191481738145488197408143974100005368917691889306816073877747840311809869542153820130435087879146183974279122629128408384959137465782812935595987250091624684989108692128349433745217472877091350274769859438884983222790350051901166852581120290950561483421721316586954444735002687579209000161891198947627558695845126483722729703637984723131253717310389952207727437084422942005356354809990426412049332055781972136306458925584105788154007180134661,\"H2i\":15409633517928220236640049970967041884764855414074674995157260290063559759262220698185968631781690927683078657109612490701213386498463251815189727248754103788715720190695969955044503102850291801183081204526069042762196860599488964509943844629816743917591525156901272425060832473457846735128144434956763136487197954966654396405824189064390282042888096638890265810752172731292777303519322349919798366023490420767784328165435560035183991888052312611550892267004025533854351168361575633966113808445314866033042611653035547811199522254578775347631458101040188257459794962090525853828832522928227656702959365714157592574509,\"Alpha\":20877979999737962976909723667576423477510106808672013754048089402122615971870634979427333242117284105349323990995583628073666596559661634992867385253604809046370418225198988850726100367912275994154535342443837319302957480298185934165856855615334138973993184965676090345849965508433879755869022617242786588433371962439102780497804109175334458892593995744145715795209054094462843086461699007880481453213618527475229788214720202207056007232888844272657052227097195986245469116243924154813376402550012973014359668758012708732467183848851668639605283008310828553622281035922464059080295325587755164461902471679982999935974,\"Beta\":1903426384349716725694538153536357347822897254583497709549608449917490016776967357388284216791563235857886859115909699426876746091235984920307076192511256577287853613211654742727854370089629296096348376103177840742427217437524993924984081473084405557818227811076588180914749358023714514916484306337125879287091149795843576986857635679513355298894849472790299948235922514033979340164382636595781705446556074590954122405209282309238040052887774351127994723229178354501673419568736207495513638830856586979434360038531419856946829362897348321909115387980417525583226978930669893608538816537806495181207261554758479104060,\"P\":67901647332447993287171783029121912690351843580103169129268446449462637304553449113178863616894844352317034273305820501982651407827244199748663795566307601616870949038248249382268041275978817705150375145618179519367103091456446062651203795580139514313259831666454440858666150744492568714470045117196505367909,\"Q\":85824140378248383298422253871428219057871740712988075313794019562205877684009565238637680669968627280112614122575934449632541293456422150955248071661136985773348412260156441987661454054006518914347445974178215135246386379075789304647838447272714976773718798188714362403092389277163515342681165229752803785123,\"Xi\":73217924949617921292679988792605371953005972396796584718315074957563050539699,\"ShareID\":102598741769699338962260510953272227089732108379858515678283915501347723732517,\"Ks\":[102598741769699338962260510953272227089732108379858515678283915501347723732517,102598741769699338962260510953272227089732108379858515678283915501347723732518,102598741769699338962260510953272227089732108379858515678283915501347723732519,102598741769699338962260510953272227089732108379858515678283915501347723732520,102598741769699338962260510953272227089732108379858515678283915501347723732521],\"NTildej\":[23310402050297325781581483366962185815577041504078468156473005444250996328657951515328012353653336262537266843328590568648813742561585400734244531220249752442302288273857209811144750292063854373365634552714007249826566182261970725103702866325021566805324238206796552830683696865233491340944601323621437239500538679324801030257055596449014703042654100925165485435488922929343251052763566612397362360933498717823690199329937475763998834195938583864496871082278296150995427569233598061191229376977318451637070187561396048286739002653409628496068714610530789337190532271355670062240646033344054416256608881937430201577293,28289112813647378253231409446853500696992073967487077733014160691709072031529630964117935292800498106170122090325183996346883638502408447897795416742008413281178838971376797870414362918062936156613589836604529910752029942494674169390123571504554077661991172761461127488985615711782627641307489394939854414041207114057129303698309053656658471432602917669498778504035951615769990757424972478216662987739727494539714185819900603205208000624375542960924701997501637123385004986706674683148531397449697952781341774177065195352763796168601817868770171599704301345279290461264203350160830905373551794163837664361259569266949,22006339693444410475464897290829199129934507648942677678359761785856505429885142459230450004489438242448728839644395600028817525406566017444971834522463663065597447424991499309646425867994018966744824841910234563632889540714442571393451073691176060838552605150248407889327398584807262232999936481876844347126994226438419177130403713673905397748723823485063127799023569336872726972371693546341152626579950725150461210862852588137350851014921590056421061482987934873672286741286838397937297254765900858288261555674738604962111078668438381433850313935993215474562651166090965660439989928236173422660361069632190923881257,28858808305258755961988451726030799739331419634367731689301606329669802950719923745649520206277237877503299842851241154308842599405357463660595913170352261884064448446611600427077526389274053879645527177336712502253729913651332570684753299438591558928965379818904209081552704487337699237994923888639242565409473769574614316012685136303900326757549292467051399965728617523043612313880448109526958502430046193556069235403690455657591758171303085467883244308611329048679912954881530949855338547630710361746251894227479988975823895125332828403364952695157552665096533229541339153843588225557442141874025052757906872628821,23654791759128880599727058324310061631863396993353821437043050020136754885986778657490348003286358021684666853579643978116924181379312061700616340512093364948687000547584890352483944991206111128581161501164702078191112346373624006562862231869883265401835375649295802116174919282308455665029846725269098304272914200423298571867994449175054066221038007249729568513170270200111453131426093287658280122436266131019144391560841370617457724314703687464825830159075513451971687939486570962105817420178802892561525102288245538286289878938492846510122630765749751027378982851877168260006483051488912729904976475346801279976417],\"H1j\":[23014882774425849099472165037063951513060118783893942126976548830173536645223150576191774437336699502942360822956565575694746408679762617757003831353058806704836813780037256813191481738145488197408143974100005368917691889306816073877747840311809869542153820130435087879146183974279122629128408384959137465782812935595987250091624684989108692128349433745217472877091350274769859438884983222790350051901166852581120290950561483421721316586954444735002687579209000161891198947627558695845126483722729703637984723131253717310389952207727437084422942005356354809990426412049332055781972136306458925584105788154007180134661,25323448771655024292514715490927751677102045430935631053200562808425955828269472019027500822345273859036347728482427307929281886578694558165851939368447758338693067439839151895338175272382501825244134989058811770684679706629857575869933073122373303719837624340144637411437344251020516482159031027541338054805938243703248396182191928040572286089597566999655610936266261798445110671639860110980319431290778811304772140584103014226461610573790895015139544459098234400239940554146232884340624351977407308312252545517513192406379692118712543792123447371606139165845653584019806023453473270049128745311031866473455102702833,4579741308199685460438642864028841650017487339450772920232173138526924281975639021899533987896198507532224555972816337510168818720614638992546096308276012785697600611899497268788010376126203944028979693964913587519364167950502547999076409585587954976203106870061660809848151967696844519937194883642455492972309745406723425435848832590989655695637836127593666619123112074399722678353876780944361609367029834842008119920303630062815752486922843338219408444650207279617847685256624567503773198782777022783476565394227857595110713587618706758206090108591577800971608903780043163356632998118267309985001861944154416135505,24669790284985561517945280638091650555884752198976245685923676661145689140459562681708845834105650959994014045874696179725282242091054313161567431567840918265636231125115634667685536365743753473116246143799085107206039208307496057285570275919041087859936887685900457628462485659890803249402029423868694304751892628776492870653953293270396636596627324602935208275510739297743324834364393082472911844081590450193834794275353950929371899903294903069051633831368308354947080658614092448279379813943979804474829767149248011806311140456590540632060354532795805168992607079863489516682604191962440039712209377384460420032112,5136586729571460421318969091790465191610868513715020260361992787295880625795330423532773480223502797411797878425070778974279462917028285707952479789341247544228180115969428982160235938802692950456579552319417488046967065409662138275056521100527718753968250572874065914492048999717926098000616313414826610718417700653426111517194887034979100068869684519055827773786747954361920601355484720862675871161050718531148543949884054376029214664081757388018798240338493747086151712618483171122326482132466086964407603651894870340404665524474712663840523550508912618482763372678122195484675661894962434308674419321229954089731],\"H2j\":[15409633517928220236640049970967041884764855414074674995157260290063559759262220698185968631781690927683078657109612490701213386498463251815189727248754103788715720190695969955044503102850291801183081204526069042762196860599488964509943844629816743917591525156901272425060832473457846735128144434956763136487197954966654396405824189064390282042888096638890265810752172731292777303519322349919798366023490420767784328165435560035183991888052312611550892267004025533854351168361575633966113808445314866033042611653035547811199522254578775347631458101040188257459794962090525853828832522928227656702959365714157592574509,19742422386151343477301282778803880281138361518349764465543178337089954159443115634421029622473195691737165411898898886072485094582257629551161977039726355498485625548838089961947058597505673088889356445792970903392986457830373218765555372343343274613929222776188375154998606598532511833772831527873540107445068427579490335705674653984438476175167683766574749566519127934820591245863058216360971607616843804816688929695388995106224932170537010397969318136976138152571858228493278629073641086447870089446087611443176134538116119988905752520214914306666567053605996010084329400706430156029278888890779594872755054815327,10249031670772829297034040250741781575315815445231390469779179075967199586275353873314213448304810129957551694730430753316210083970432573887740288526621640646357265091618743101280984066633178722321048647192124395686597915083176698926751481113848674323240329375346813703405691459413256437548980326402078504067987798291498374741444410267515640688105617353786332867141728771907554239016668011189556710612654146563371384443495625478370342934981391981108308907567789518075165100526039945310175054262541348257973058003814548640677435439770013607083389967815541769876256304839211427713612024137913329431889230329969564841242,8993309200258495220363144750999399859464783826393282622781002838059120645984963619576265903580109695047063424026816392626160407345681479781265809035281550773814245264374464749662293073718495811428875833568130523220071889619382739703052029281077300552494893973827178778494166370558291360012684803776620930369920427165233244310449588385668568610807923315935473481120623619191402962628272234916791893283803098971652975595790918903134839406827870170692680970188588934898651032215789695976140266333612924325138849123542097365187744387735892826315449538948559481214146983322973491657337777186337346605616171920975326792975,10283214153703282798790670834855711712430325431318297163929788651967511704924589543134778231206447488759018596650884554375098946555544025784190206012462475239501957143785761557625310144897762944511884230083462860481473647935654177754502776201451348419567953035204640105117661004014347110772842204643950738478643232719210226838705547665257813048977320647396856465662065914033984632094779301678577996871256391824528874497856150346847324905044942019882737501725017894402559847472477777035272382815764052172876052474226176500387291289902983691691665205313690513936700645672765768834288579720478975388365725357000312412934],\"BigXj\":[{\"Curve\":\"secp256k1\",\"Coords\":[51232448773742097890608189419715262492008666306646548025930345040994868676601,11012588968314396998515570916724765597611544281294518918531173246230021523713]},{\"Curve\":\"secp256k1\",\"Coords\":[88851542727648917624845923819132284714143046117282997924269651764671328125450,57434154834425655009258193863723431195257652965227896563145452107904810554199]},{\"Curve\":\"secp256k1\",\"Coords\":[103189386274827097703789156729742795269635768680090371859455428149733221855874,39824754825612961938726495632137282306211145337048005402598444213746796057197]},{\"Curve\":\"secp256k1\",\"Coords\":[74289871685291130134242929013617448537986704866850755324375228281608398847684,23455463674974448681455426547298351551081623842615113292410413067117259535497]},{\"Curve\":\"secp256k1\",\"Coords\":[18204606396991718000460764506152135127125414687011438776820029339900297188385,56963521365901418845868554091221794599042953726225619179208362747071540110745]}],\"PaillierPKs\":[{\"N\":23310402050297325781581483366962185815577041504078468156473005444250996328657951515328012353653336262537266843328590568648813742561585400734244531220249752442302288273857209811144750292063854373365634552714007249826566182261970725103702866325021566805324238206796552830683696865233491340944601323621437239500538679324801030257055596449014703042654100925165485435488922929343251052763566612397362360933498717823690199329937475763998834195938583864496871082278296150995427569233598061191229376977318451637070187561396048286739002653409628496068714610530789337190532271355670062240646033344054416256608881937430201577293},{\"N\":28289112813647378253231409446853500696992073967487077733014160691709072031529630964117935292800498106170122090325183996346883638502408447897795416742008413281178838971376797870414362918062936156613589836604529910752029942494674169390123571504554077661991172761461127488985615711782627641307489394939854414041207114057129303698309053656658471432602917669498778504035951615769990757424972478216662987739727494539714185819900603205208000624375542960924701997501637123385004986706674683148531397449697952781341774177065195352763796168601817868770171599704301345279290461264203350160830905373551794163837664361259569266949},{\"N\":22006339693444410475464897290829199129934507648942677678359761785856505429885142459230450004489438242448728839644395600028817525406566017444971834522463663065597447424991499309646425867994018966744824841910234563632889540714442571393451073691176060838552605150248407889327398584807262232999936481876844347126994226438419177130403713673905397748723823485063127799023569336872726972371693546341152626579950725150461210862852588137350851014921590056421061482987934873672286741286838397937297254765900858288261555674738604962111078668438381433850313935993215474562651166090965660439989928236173422660361069632190923881257},{\"N\":28858808305258755961988451726030799739331419634367731689301606329669802950719923745649520206277237877503299842851241154308842599405357463660595913170352261884064448446611600427077526389274053879645527177336712502253729913651332570684753299438591558928965379818904209081552704487337699237994923888639242565409473769574614316012685136303900326757549292467051399965728617523043612313880448109526958502430046193556069235403690455657591758171303085467883244308611329048679912954881530949855338547630710361746251894227479988975823895125332828403364952695157552665096533229541339153843588225557442141874025052757906872628821},{\"N\":23654791759128880599727058324310061631863396993353821437043050020136754885986778657490348003286358021684666853579643978116924181379312061700616340512093364948687000547584890352483944991206111128581161501164702078191112346373624006562862231869883265401835375649295802116174919282308455665029846725269098304272914200423298571867994449175054066221038007249729568513170270200111453131426093287658280122436266131019144391560841370617457724314703687464825830159075513451971687939486570962105817420178802892561525102288245538286289878938492846510122630765749751027378982851877168260006483051488912729904976475346801279976417}],\"ECDSAPub\":{\"Curve\":\"secp256k1\",\"Coords\":[40090070592262310935447142890833955707545334926897380327937157190521022055277,114189044052832275049568497185713281872442490750510938483845334931030692075143]}}"
)

func setUp(level string) {
	if err := log.SetLogLevel("tss-lib", level); err != nil {
		panic(err)
	}
}

func handleMessage(t *testing.T, msg tss.Message, parties []*LocalParty, updater func(party tss.Party, msg tss.Message, errCh chan<- *tss.Error, simNetDelayMS ...int), errCh chan *tss.Error) bool {
	dest := msg.GetTo()
	if dest == nil { // broadcast!
		for _, P := range parties {
			if P.PartyID().Index == msg.GetFrom().Index {
				continue
			}
			go updater(P, msg, errCh)
		}
	} else { // point-to-point!
		if dest[0].Index == msg.GetFrom().Index {
			t.Fatalf("party %d tried to send a message to itself (%d)", dest[0].Index, msg.GetFrom().Index)
			return true
		}
		go updater(parties[dest[0].Index], msg, errCh)
	}
	return false
}

func initTheParties(pIDs tss.SortedPartyIDs, p2pCtx *tss.PeerContext, threshold int, fixtures []LocalPartySaveData, outCh chan tss.Message, endCh chan LocalPartySaveData, parties []*LocalParty, errCh chan *tss.Error) ([]*LocalParty, chan *tss.Error) {
	// q := big.Wrap(tss.GetCurveForUnitTest().Params().N)
	// sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())
	// try a small sessionId
	sessionId := new(big.Int).SetInt64(1)
	// init the parties
	for i := 0; i < len(pIDs); i++ {
		var P *LocalParty
		params, _ := tss.NewParameters(tss.GetCurveForUnitTest(), p2pCtx, pIDs[i], len(pIDs), threshold)
		if i < len(fixtures) {
			P_, _ := NewLocalParty(params, outCh, endCh, sessionId, fixtures[i].LocalPreParams)
			P, _ = P_.(*LocalParty)
		} else {
			P_, _ := NewLocalParty(params, outCh, endCh, sessionId)
			P, _ = P_.(*LocalParty)
		}
		parties = append(parties, P)
		go func(P *LocalParty) {
			if err := P.Start(); err != nil {
				errCh <- err
			}
		}(P)
	}
	return parties, errCh
}

func tryWriteTestFixtureFile(t *testing.T, index int, data LocalPartySaveData) {
	fixtureFileName := makeTestFixtureFilePath(index)

	// fixture file does not already exist?
	// if it does, we won't re-create it here
	fi, err := os.Stat(fixtureFileName)
	if !(err == nil && fi != nil && !fi.IsDir()) {
		fd, err := os.OpenFile(fixtureFileName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
		if err != nil {
			assert.NoErrorf(t, err, "unable to open fixture file %s for writing", fixtureFileName)
		}
		bz, err := json.Marshal(&data)
		if err != nil {
			t.Fatalf("unable to marshal save data for fixture file %s", fixtureFileName)
		}
		_, err = fd.Write(bz)
		if err != nil {
			t.Fatalf("unable to write to fixture file %s", fixtureFileName)
		}
		t.Logf("Saved a test fixture file for party %d: %s", index, fixtureFileName)
	} else {
		t.Logf("Fixture file already exists for party %d; not re-creating: %s", index, fixtureFileName)
	}
	//
}

func TestStartRound1Paillier(t *testing.T) {
	t.Parallel()
	setUp("info")

	pIDs := tss.GenerateTestPartyIDs(2)
	p2pCtx := tss.NewPeerContext(pIDs)
	threshold := 1
	params, _ := tss.NewParameters(tss.GetCurveForUnitTest(), p2pCtx, pIDs[0], len(pIDs), threshold)

	fixtures, pIDs, err := LoadKeygenTestFixtures(testParticipants)
	if err != nil {
		common.Logger.Info("No test fixtures were found, so the safe primes will be generated from scratch. This may take a while...")
		pIDs = tss.GenerateTestPartyIDs(testParticipants)
	}
	q := big.Wrap(tss.GetCurveForUnitTest().Params().N)
	sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())
	var lp *LocalParty
	out := make(chan tss.Message, len(pIDs))
	if 0 < len(fixtures) {
		lp_, _ := NewLocalParty(params, out, nil, sessionId, fixtures[0].LocalPreParams)
		lp = lp_.(*LocalParty)
	} else {
		lp_, _ := NewLocalParty(params, out, nil, sessionId)
		lp = lp_.(*LocalParty)
	}
	if err := lp.Start(); err != nil {
		assert.FailNow(t, err.Error())
	}
	<-out

	// Paillier modulus 2048 (two 1024-bit primes)
	// round up to 256, it was used to be flaky, sometimes comes back with 1 byte less
	len1 := len(lp.data.PaillierSK.LambdaN.Bytes())
	len2 := len(lp.data.PaillierSK.PublicKey.N.Bytes())
	if len1%2 != 0 {
		len1 = len1 + (256 - (len1 % 256))
	}
	if len2%2 != 0 {
		len2 = len2 + (256 - (len2 % 256))
	}
	assert.Equal(t, 2048/8, len1)
	assert.Equal(t, 2048/8, len2)
}

func TestFinishAndSaveH1H2(t *testing.T) {
	t.Parallel()
	setUp("info")

	pIDs := tss.GenerateTestPartyIDs(2)
	p2pCtx := tss.NewPeerContext(pIDs)
	threshold := 1
	params, _ := tss.NewParameters(tss.GetCurveForUnitTest(), p2pCtx, pIDs[0], len(pIDs), threshold)

	fixtures, pIDs, err := LoadKeygenTestFixtures(testParticipants)
	if err != nil {
		common.Logger.Info("No test fixtures were found, so the safe primes will be generated from scratch. This may take a while...")
		pIDs = tss.GenerateTestPartyIDs(testParticipants)
	}
	q := big.Wrap(tss.GetCurveForUnitTest().Params().N)
	sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())
	var lp *LocalParty
	out := make(chan tss.Message, len(pIDs))
	if 0 < len(fixtures) {
		lp_, _ := NewLocalParty(params, out, nil, sessionId, fixtures[0].LocalPreParams)
		lp = lp_.(*LocalParty)
	} else {
		lp_, _ := NewLocalParty(params, out, nil, sessionId)
		lp = lp_.(*LocalParty)
	}
	if err := lp.Start(); err != nil {
		assert.FailNow(t, err.Error())
	}

	// RSA modulus 2048 (two 1024-bit primes)
	// round up to 256
	len1 := len(lp.data.H1j[0].Bytes())
	len2 := len(lp.data.H2j[0].Bytes())
	len3 := len(lp.data.NTildej[0].Bytes())
	if len1%2 != 0 {
		len1 = len1 + (256 - (len1 % 256))
	}
	if len2%2 != 0 {
		len2 = len2 + (256 - (len2 % 256))
	}
	if len3%2 != 0 {
		len3 = len3 + (256 - (len3 % 256))
	}
	// 256 bytes = 2048 bits
	assert.Equal(t, 256, len1, "h1 should be correct len")
	assert.Equal(t, 256, len2, "h2 should be correct len")
	assert.Equal(t, 256, len3, "n-tilde should be correct len")
	assert.NotZero(t, lp.data.H1i, "h1 should be non-zero")
	assert.NotZero(t, lp.data.H2i, "h2 should be non-zero")
	assert.NotZero(t, lp.data.NTildei, "n-tilde should be non-zero")
}

func TestBadMessageCulprits(t *testing.T) {
	t.Parallel()
	setUp("info")

	pIDs := tss.GenerateTestPartyIDs(2)
	p2pCtx := tss.NewPeerContext(pIDs)
	params, _ := tss.NewParameters(tss.S256(), p2pCtx, pIDs[0], len(pIDs), 1)

	fixtures, pIDs, err := LoadKeygenTestFixtures(testParticipants)
	if err != nil {
		common.Logger.Info("No test fixtures were found, so the safe primes will be generated from scratch. This may take a while...")
		pIDs = tss.GenerateTestPartyIDs(testParticipants)
	}
	q := big.Wrap(tss.GetCurveForUnitTest().Params().N)
	sessionId := common.GetRandomPositiveInt(q)
	var lp *LocalParty
	out := make(chan tss.Message, len(pIDs))
	if 0 < len(fixtures) {
		lp_, _ := NewLocalParty(params, out, nil, sessionId, fixtures[0].LocalPreParams)
		lp = lp_.(*LocalParty)
	} else {
		lp_, _ := NewLocalParty(params, out, nil, sessionId)
		lp = lp_.(*LocalParty)
	}
	if err := lp.Start(); err != nil {
		assert.FailNow(t, err.Error())
	}

	// badMsg := NewKGRound1Message(pIDs[1], zero, &paillier.PublicKey{N: zero}, zero, zero, zero)
	badMsg := NewKGRound1Message(sessionId, pIDs[1], zero, zero, zero, zero)
	ok, err2 := lp.Update(badMsg)
	t.Log(err2)
	assert.False(t, ok)
	if !assert.Error(t, err2) {
		return
	}
	assert.Equal(t, 1, len(err2.Culprits()))
	assert.Equal(t, pIDs[1], err2.Culprits()[0])
	assert.Regexpf(t, `^task ecdsa-keygen, party.+round 1, culprits.+message failed ValidateBasic.+KGRound1Message`, err2.Error(), "unexpected culprit error message")
	assert.Regexpf(t, `^task ecdsa-keygen, party.+round 1, culprits.+1,.*2.+message failed ValidateBasic.+KGRound1Message`, err2.Error(), "unexpected culprit error message")

	// expected: "task ecdsa-keygen, party {0,P[1]}, round 1, culprits [{1,2}]: message failed ValidateBasic: Type: binance.tsslib.ecdsa.keygen.KGRound1Message, From: {1,2}",
	// or "[...] culprits [{1,P[2]}]: message failed[...]"

}

func TestE2EConcurrentAndSaveFixtures(t *testing.T) {
	t.Parallel()
	setUp("debug")

	threshold := testThreshold
	fixtures, pIDs, err := LoadKeygenTestFixtures(testParticipants)
	if err != nil {
		common.Logger.Info("No test fixtures were found, so the safe primes will be generated from scratch. This may take a while...",
			err)
		pIDs = tss.GenerateTestPartyIDs(testParticipants)
	}

	p2pCtx := tss.NewPeerContext(pIDs)
	parties := make([]*LocalParty, 0, len(pIDs))

	errCh := make(chan *tss.Error, len(pIDs))
	outCh := make(chan tss.Message, len(pIDs))
	endCh := make(chan LocalPartySaveData, len(pIDs))

	updater := test.SharedPartyUpdaterAsync

	startGR := runtime.NumGoroutine()

	parties, errCh = initTheParties(pIDs, p2pCtx, threshold, fixtures, outCh, endCh, parties, errCh)

	// PHASE: keygen
	var ended int32
keygen:
	for {
		fmt.Printf("ACTIVE GOROUTINES: %d\n", runtime.NumGoroutine())
		select {
		case err := <-errCh:
			common.Logger.Errorf("Error: %s", err)
			assert.FailNow(t, err.Error())
			break keygen

		case msg := <-outCh:
			if handleMessage(t, msg, parties, updater, errCh) {
				return
			}

		case save := <-endCh:
			// SAVE a test fixture file for this P (if it doesn't already exist)
			// .. here comes a workaround to recover this party's index (it was removed from save data)
			index, err := save.OriginalIndex()
			assert.NoErrorf(t, err, "should not be an error getting a party's index from save data")
			tryWriteTestFixtureFile(t, index, save)

			atomic.AddInt32(&ended, 1)
			if atomic.LoadInt32(&ended) == int32(len(pIDs)) {
				t.Logf("Done. Received save data from %d participants", ended)

				// combine shares for each Pj to get u
				u := big.NewInt(0)
				for j, Pj := range parties {
					pShares := make(vss.Shares, 0)
					for j2, P := range parties {
						var share *big.Int
						P.Lock()
						if j2 == j {
							share = P.temp.shares[j].Share
						} else {
							share = P.temp.r3msgxij[j]
						}
						// vssMsgs := P.temp.kgRound3Messages
						// share := vssMsgs[j].Content().(*KGRound3Message).Share
						shareStruct := &vss.Share{
							Threshold: threshold,
							ID:        P.PartyID().KeyInt(),
							Share:     share, // new(big.Int).SetBytes(share),
						}
						pShares = append(pShares, shareStruct)
						P.Unlock()
					}
					Pj.Lock()
					uj, errRec := pShares[:threshold+1].ReConstruct(tss.GetCurveForUnitTest())
					assert.NoError(t, errRec, "vss.ReConstruct should not throw error")

					// uG test: u*G[j] == V[0]
					assert.Equal(t, uj.Cmp(Pj.temp.ui), 0)
					uG, _ := crypto.ScalarBaseMult(tss.GetCurveForUnitTest(), uj)
					V0 := Pj.temp.vs[0]
					if Pj.temp.r2msgVss[j] != nil {
						V0 = Pj.temp.r2msgVss[j][0]
					}
					assert.True(t, uG.Equals(V0), "ensure u*G[j] == V_0")

					// xj tests: BigXj == xj*G
					xj := Pj.data.Xi
					gXj, _ := crypto.ScalarBaseMult(tss.GetCurveForUnitTest(), xj)
					BigXj := Pj.data.BigXj[j]
					assert.True(t, BigXj.Equals(gXj), "ensure BigX_j == g^x_j")

					// fails if threshold cannot be satisfied (bad share)
					{
						badShares := pShares[:threshold]
						badShares[len(badShares)-1].Share.Set(big.NewInt(0))
						uj, err := pShares[:threshold+1].ReConstruct(tss.S256())
						assert.NoError(t, err)
						assert.NotEqual(t, parties[j].temp.ui, uj)
						BigXjX, BigXjY := tss.GetCurveForUnitTest().ScalarBaseMult(uj.Bytes())
						V_0 := Pj.temp.vs[0]
						if Pj.temp.r2msgVss[j] != nil {
							V_0 = Pj.temp.r2msgVss[j][0]
						}
						assert.NotEqual(t, BigXjX, V_0.X())
						assert.NotEqual(t, BigXjY, V_0.Y())
					}
					u = new(big.Int).Add(u, uj)
					Pj.Unlock()
				}

				// build ecdsa key pair
				pkX, pkY := save.ECDSAPub.X(), save.ECDSAPub.Y()
				pk := ecdsa.PublicKey{
					Curve: tss.GetCurveForUnitTest(),
					X:     pkX,
					Y:     pkY,
				}
				sk := ecdsa.PrivateKey{
					PublicKey: pk,
					D:         u,
				}
				// test pub key, should be on curve and match pkX, pkY
				assert.True(t, sk.IsOnCurve(pkX, pkY), "public key must be on curve")

				// public key tests
				assert.NotZero(t, u, "u should not be zero")
				ourPk, _ := crypto.ScalarBaseMult(tss.GetCurveForUnitTest(), u)

				assert.Equal(t, pkX, ourPk.X(), "pkX should match expected pk derived from u")
				assert.Equal(t, pkY, ourPk.Y(), "pkY should match expected pk derived from u")
				t.Log("Public key tests done.")

				// make sure everyone has the same ECDSA public key
				for _, Pj := range parties {
					assert.Equal(t, pkX, Pj.data.ECDSAPub.X())
					assert.Equal(t, pkY, Pj.data.ECDSAPub.Y())
				}
				t.Log("Public key distribution test done.")

				// test sign/verify
				data := make([]byte, 32)
				for i := range data {
					data[i] = byte(i)
				}
				r, s, err := ecdsa.Sign(rand.Reader, &sk, data)
				assert.NoError(t, err, "sign should not throw an error")
				ok := ecdsa.Verify(&pk, data, r, s)
				assert.True(t, ok, "signature should be ok")
				t.Log("ECDSA signing test done.")

				t.Logf("Start goroutines: %d, End goroutines: %d", startGR, runtime.NumGoroutine())

				break keygen
			}
		}
	}
}

func TestTooManyParties(t *testing.T) {
	t.Parallel()
	setUp("info")

	pIDs := tss.GenerateTestPartyIDs(MaxParties + 1)
	p2pCtx := tss.NewPeerContext(pIDs)
	params, _ := tss.NewParameters(tss.S256(), p2pCtx, pIDs[0], len(pIDs), MaxParties/100)
	q := big.Wrap(tss.GetCurveForUnitTest().Params().N)
	sessionId := common.GetBigRandomPositiveInt(q, q.BitLen())
	out := make(chan tss.Message, len(pIDs))
	var err error
	_, err = NewLocalParty(params, out, nil, sessionId)
	if !assert.Error(t, err) {
		t.FailNow()
		return
	}
}

func handleMessageRepeating(t *testing.T, msg tss.Message, parties []*LocalParty,
	updater func(party tss.Party, msg tss.Message, errCh chan<- *tss.Error, simNetDelayMS ...int), errCh chan *tss.Error) bool {
	dest := msg.GetTo()
	if dest == nil { // broadcast!
		for _, P := range parties {
			if P.PartyID().Index == msg.GetFrom().Index {
				continue
			}
			go updater(P, msg, errCh)
		}
	} else { // point-to-point!
		if dest[0].Index == msg.GetFrom().Index {
			t.Fatalf("party %d tried to send a message to itself (%d)", dest[0].Index, msg.GetFrom().Index)
			return true
		}
		go updater(parties[dest[0].Index], msg, errCh)
		if dest[0].Index < len(parties)/2 {
			go updater(parties[dest[0].Index], msg, errCh)
		}
	}
	return false
}

func TestRepeatedKGRound3Message(t *testing.T) {
	t.Parallel()
	setUp("debug")

	threshold := testThreshold
	fixtures, pIDs, err := LoadKeygenTestFixtures(testParticipants)
	if err != nil {
		common.Logger.Info("No test fixtures were found, so the safe primes will be generated from scratch. This may take a while...",
			err)
		pIDs = tss.GenerateTestPartyIDs(testParticipants)
	}

	p2pCtx := tss.NewPeerContext(pIDs)
	parties := make([]*LocalParty, 0, len(pIDs))

	errCh := make(chan *tss.Error, len(pIDs))
	outCh := make(chan tss.Message, len(pIDs))
	endCh := make(chan LocalPartySaveData, len(pIDs))

	updater := test.SharedPartyUpdaterAsync

	startGR := runtime.NumGoroutine()

	parties, errCh = initTheParties(pIDs, p2pCtx, threshold, fixtures, outCh, endCh, parties, errCh)

	// PHASE: keygen
	var ended int32
keygen:
	for {
		fmt.Printf("ACTIVE GOROUTINES: %d\n", runtime.NumGoroutine())
		select {
		case err := <-errCh:
			common.Logger.Errorf("Error: %s", err)
			assert.FailNow(t, err.Error())
			break keygen

		case msg := <-outCh:
			if handleMessageRepeating(t, msg, parties, updater, errCh) {
				return
			}

		case save := <-endCh:
			// SAVE a test fixture file for this P (if it doesn't already exist)
			// .. here comes a workaround to recover this party's index (it was removed from save data)
			index, err := save.OriginalIndex()
			assert.NoErrorf(t, err, "should not be an error getting a party's index from save data")
			tryWriteTestFixtureFile(t, index, save)

			atomic.AddInt32(&ended, 1)
			if atomic.LoadInt32(&ended) == int32(len(pIDs)) {
				t.Logf("Done. Received save data from %d participants", ended)

				t.Log("ECDSA signing test done.")

				t.Logf("Start goroutines: %d, End goroutines: %d", startGR, runtime.NumGoroutine())

				break keygen
			}
		}
	}
}

func TestLocalPartySaveDataSerialization(t *testing.T) {
	t.Parallel()
	fixture := new(LocalPartySaveData)
	if err := json.Unmarshal([]byte(ecdsaSaveFixtureJSON), fixture); err != nil {
		t.Fatalf("failed to unmarshal fixture: %v", err)
	}

	// JSON serialization
	jsonData, err := json.Marshal(&fixture)
	assert.NoError(t, err)

	jsonDecoded := new(LocalPartySaveData)
	err = json.Unmarshal(jsonData, jsonDecoded)
	assert.NoError(t, err)

	assert.Equal(t, fixture, jsonDecoded, "JSON decoded data should be the same as the original fixture")

	// Gob serialization
	var gobBuffer bytes.Buffer
	gobEncoder := gob.NewEncoder(&gobBuffer)
	err = gobEncoder.Encode(&fixture)
	assert.NoError(t, err)

	gobEncodedLen := gobBuffer.Len()
	gobDecoder := gob.NewDecoder(&gobBuffer)
	gobDecoded := new(LocalPartySaveData)
	err = gobDecoder.Decode(gobDecoded)
	assert.NoError(t, err)

	assert.Equal(t, fixture, gobDecoded, "Gob decoded data should be the same as the original fixture")

	// Print sizes of original and encoded data
	t.Logf("JSON (original) size: %d bytes", len(ecdsaSaveFixtureJSON))
	t.Logf("JSON (encoded) size: %d bytes", len(jsonData))
	t.Logf("Gob encoded size: %d bytes", gobEncodedLen)
}
